import { Injectable, Logger } from '@nestjs/common';
import { PdfImageService } from './pdf-image.service';

/**
 * Servicio para determinar estrategias inteligentes de conversi√≥n de p√°ginas PDF
 * Optimiza el an√°lisis seg√∫n el tipo de pregunta y ubicaci√≥n t√≠pica de informaci√≥n
 */
@Injectable()
export class PdfPageStrategyService {
  private readonly logger = new Logger(PdfPageStrategyService.name);

  constructor(
    private readonly pdfImageService: PdfImageService,
  ) {}

  /**
   * Convierte p√°ginas de PDF con estrategia inteligente de reintentos
   * Si falla la conversi√≥n m√∫ltiple, intenta p√°ginas individuales clave
   */
  async convertPagesWithStrategy(
    pdfBase64: string,
    pmcField?: string,
    maxAttempts: number = 3
  ): Promise<Map<number, string>> {
    const imageMap = new Map<number, string>();
    
    // Determinar p√°ginas prioritarias seg√∫n el campo
    const priorityPages = this.determinePriorityPages(pmcField);
    
    this.logger.log(`üìÑ Estrategia de conversi√≥n para ${pmcField || 'general'}: p√°ginas ${priorityPages.join(', ')}`);
    
    // Intento 1: Convertir todas las p√°ginas prioritarias de una vez
    try {
      const fullConversion = await this.pdfImageService.convertPages(pdfBase64, priorityPages);
      if (fullConversion.size > 0) {
        this.logger.log(`‚úÖ Conversi√≥n exitosa: ${fullConversion.size} p√°ginas`);
        return fullConversion;
      }
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Fallo conversi√≥n m√∫ltiple: ${error.message}`);
    }
    
    // Intento 2: Convertir p√°ginas individualmente en orden de prioridad
    for (const pageNum of priorityPages) {
      try {
        this.logger.log(`üîÑ Intentando p√°gina individual: ${pageNum}`);
        const singlePageImage = await this.pdfImageService.convertSinglePage(
          Buffer.from(pdfBase64, 'base64'),
          pageNum
        );
        
        if (singlePageImage) {
          imageMap.set(pageNum, singlePageImage);
          this.logger.log(`‚úÖ P√°gina ${pageNum} convertida exitosamente`);
          
          // Para firmas, si encontramos una p√°gina, intentar la anterior y siguiente
          if (pmcField && pmcField.includes('sign')) {
            await this.tryAdjacentPages(pdfBase64, pageNum, imageMap);
          }
        }
      } catch (pageError) {
        this.logger.warn(`‚ö†Ô∏è No se pudo convertir p√°gina ${pageNum}: ${pageError.message}`);
      }
    }
    
    // Intento 3: Si no tenemos ninguna imagen y es cr√≠tico, intentar p√°ginas de emergencia
    if (imageMap.size === 0) {
      this.logger.warn('üÜò Sin im√°genes - intentando p√°ginas de emergencia');
      const emergencyPages = [1, 2]; // Primera y segunda p√°gina como m√≠nimo
      
      for (const pageNum of emergencyPages) {
        if (!imageMap.has(pageNum)) {
          try {
            const emergencyImage = await this.pdfImageService.convertSinglePage(
              Buffer.from(pdfBase64, 'base64'),
              pageNum
            );
            if (emergencyImage) {
              imageMap.set(pageNum, emergencyImage);
              this.logger.log(`üÜò P√°gina de emergencia ${pageNum} convertida`);
            }
          } catch (e) {
            // Silenciar error, ya es el √∫ltimo intento
          }
        }
      }
    }
    
    this.logger.log(`üìä Resultado final: ${imageMap.size} p√°ginas convertidas: [${Array.from(imageMap.keys()).join(', ')}]`);
    return imageMap;
  }

  /**
   * Determina qu√© p√°ginas son prioritarias seg√∫n el campo PMC
   */
  private determinePriorityPages(pmcField?: string): number[] {
    if (!pmcField) {
      // Por defecto: primeras p√°ginas y √∫ltima (donde suelen estar firmas)
      return [1, 2, 3, -1]; // -1 significa √∫ltima p√°gina
    }
    
    const fieldLower = pmcField.toLowerCase();
    
    // Patrones y sus p√°ginas t√≠picas
    if (fieldLower.includes('sign') || fieldLower.includes('lop_date')) {
      // Firmas y fechas de firma: t√≠picamente al final
      return [2, 1, 3, -1, -2]; // P√°gina 2 primero (com√∫n en LOPs), luego 1, 3, √∫ltima, pen√∫ltima
    }
    
    if (fieldLower.includes('address') || fieldLower.includes('street') || 
        fieldLower.includes('city') || fieldLower.includes('zip')) {
      // Informaci√≥n de direcci√≥n: t√≠picamente al inicio
      return [1, 2];
    }
    
    if (fieldLower.includes('policy') || fieldLower.includes('claim')) {
      // Informaci√≥n de p√≥liza: primera p√°gina generalmente
      return [1, 2];
    }
    
    if (fieldLower.includes('date_of_loss')) {
      // Fecha de p√©rdida: puede estar en cualquier lugar
      return [1, 2, 3];
    }
    
    // Por defecto para campos no reconocidos
    return [1, 2, 3];
  }

  /**
   * Intenta convertir p√°ginas adyacentes si es necesario
   */
  private async tryAdjacentPages(
    pdfBase64: string,
    currentPage: number,
    imageMap: Map<number, string>
  ): Promise<void> {
    const adjacentPages = [currentPage - 1, currentPage + 1].filter(p => p > 0);
    
    for (const pageNum of adjacentPages) {
      if (!imageMap.has(pageNum)) {
        try {
          const adjacentImage = await this.pdfImageService.convertSinglePage(
            Buffer.from(pdfBase64, 'base64'),
            pageNum
          );
          if (adjacentImage) {
            imageMap.set(pageNum, adjacentImage);
            this.logger.log(`üìÑ P√°gina adyacente ${pageNum} tambi√©n convertida`);
          }
        } catch (e) {
          // Silenciar, es opcional
        }
      }
    }
  }

  /**
   * Obtiene el n√∫mero total de p√°ginas de un PDF
   */
  async getTotalPages(pdfBase64: string): Promise<number> {
    try {
      // Intentar obtener el conteo de p√°ginas del PDF
      // Esto deber√≠a implementarse en PdfImageService
      const buffer = Buffer.from(pdfBase64, 'base64');
      // Por ahora retornar un estimado conservador
      return 5;
    } catch (error) {
      this.logger.warn(`No se pudo determinar el n√∫mero de p√°ginas: ${error.message}`);
      return 5; // Asumir 5 p√°ginas por defecto
    }
  }
}