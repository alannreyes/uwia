# PLAN DE OPTIMIZACI√ìN DE LOGS PARA PRODUCCI√ìN
## Objetivo: Reducir verbosidad, mantener solo errores/warnings y evidencia de inicio/fin

### 1. ESTRUCTURA DE LOGS OBJETIVO

#### INICIO DE PROCESAMIENTO (SIEMPRE)
```
üöÄ [INICIO] Processing document: LOP.pdf (2.89MB) | Provider: 407 Restoration CA LLC | Fields: 15
```

#### FIN EXITOSO (SIEMPRE)  
```
‚úÖ [COMPLETADO] LOP.pdf processed successfully | Duration: 45.2s | Success: 13/15 fields | Errors: 0 | Warnings: 2
```

#### ERRORES (SIEMPRE)
```
‚ùå [ERROR] LOP.pdf | Field: lop_signed_by_client1 | Service: OpenAI Vision | Error: Rate limit exceeded | Retry: 2/3
```

#### WARNINGS (SIEMPRE)
```
‚ö†Ô∏è [WARNING] LOP.pdf | Field: policy_valid_from1 | Low confidence: 0.45 | Used fallback strategy
```

#### LOGS EXITOSOS (ELIMINAR EN PRODUCCI√ìN)
```
// ELIMINAR estos logs cuando todo funciona bien:
‚úÖ Page 1 converted: 1234567 chars 
üéØ Vision API for: lop_signed_by_ho1 (page 1)
üì¶ Using cached strategy for lop_signed_by_client1
üîç GPT-4o response: YES (confidence: 0.85)
```

### 2. ARCHIVOS A MODIFICAR

#### 2.1 UnderwritingService (src/modules/underwriting/underwriting.service.ts)
**Cambios:**
- Mantener: Logs de inicio/fin de documento
- Mantener: Logs LOP DECISION DEBUG solo si hay error
- Eliminar: Logs de cada campo exitoso
- Mantener: Logs de errores y timeouts
- A√±adir: Resumen final con contadores

**Implementaci√≥n:**
```typescript
// INICIO - SIEMPRE
this.logger.log(`üöÄ [INICIO] Processing ${documentName} (${fileSizeMB}MB) | Provider: ${providerName} | Fields: ${totalFields}`);

// DURANTE PROCESAMIENTO - SOLO ERRORES/WARNINGS
if (error) {
  this.logger.error(`‚ùå [ERROR] ${documentName} | Field: ${pmcField} | Service: ${serviceName} | Error: ${error.message}`);
}
if (confidence < 0.6) {
  this.logger.warn(`‚ö†Ô∏è [WARNING] ${documentName} | Field: ${pmcField} | Low confidence: ${confidence} | Strategy: ${strategy}`);
}

// FIN - SIEMPRE CON RESUMEN
this.logger.log(`‚úÖ [COMPLETADO] ${documentName} | Duration: ${duration}s | Success: ${successCount}/${totalFields} | Errors: ${errorCount} | Warnings: ${warningCount}`);
```

#### 2.2 OpenAiService (src/modules/underwriting/services/openai.service.ts)
**Cambios:**
- Eliminar: Logs "üéØ Vision API for:" exitosos
- Eliminar: Logs "üìù Text processing successful"
- Mantener: Logs de rate limiting y circuit breaker
- Mantener: Logs de reintentos
- Mantener: Logs de fallbacks y errores

#### 2.3 PdfImageService (src/modules/underwriting/services/pdf-image.service.ts)
**Cambios:**
- Eliminar: Logs "‚úÖ Page X converted: Y chars"
- Eliminar: Logs "üñºÔ∏è Converting X pages to images"
- Mantener: Logs de errores de conversi√≥n
- Mantener: Warnings de archivos muy grandes

#### 2.4 LargePdfVisionService (src/modules/underwriting/services/large-pdf-vision.service.ts)
**Cambios:**
- Eliminar: Logs de progreso p√°gina por p√°gina
- Mantener: Logs de estrategia aplicada solo si cambia
- Mantener: Logs de early exit solo si es por error
- Mantener: Logs de fallbacks y degradaci√≥n

#### 2.5 AdaptiveProcessingStrategyService (src/modules/underwriting/services/adaptive-processing-strategy.service.ts)
**Cambios:**
- Eliminar: Logs "üì¶ Using cached strategy"
- Eliminar: Logs "üíæ Cached new strategy"
- Mantener: Logs de fallback heur√≠stico
- Mantener: Warnings de rate limiting

### 3. NIVELES DE LOG PROPUESTOS

#### PRODUCCI√ìN (LOG_LEVEL=warn)
```
LOG_LEVEL=warn
ENABLE_DEBUG_LOGS=false
ENABLE_SUCCESS_LOGS=false
ENABLE_PROGRESS_LOGS=false
```

#### DESARROLLO (LOG_LEVEL=debug) 
```
LOG_LEVEL=debug
ENABLE_DEBUG_LOGS=true
ENABLE_SUCCESS_LOGS=true
ENABLE_PROGRESS_LOGS=true
```

### 4. CONFIGURACI√ìN DE ENTORNO

#### Variables de entorno para controlar verbosidad:
```bash
# Producci√≥n
ENABLE_DOCUMENT_START_END_LOGS=true      # Inicio/fin de documentos
ENABLE_FIELD_SUCCESS_LOGS=false          # √âxito por campo
ENABLE_STRATEGY_DEBUG_LOGS=false         # Debug de estrategias
ENABLE_CONVERSION_LOGS=false             # Logs de conversi√≥n PDF
ENABLE_VISION_API_LOGS=false             # Logs de llamadas exitosas a Vision API

# Solo mantener
ENABLE_ERROR_LOGS=true                   # Errores siempre
ENABLE_WARNING_LOGS=true                 # Warnings siempre
ENABLE_PERFORMANCE_LOGS=true             # M√©tricas de rendimiento
```

### 5. IMPLEMENTACI√ìN POR FASES

#### FASE 1: Configuraci√≥n
- A√±adir variables de entorno
- Crear helper para logging condicional
- A√±adir contadores para res√∫menes

#### FASE 2: Servicios principales
- Modificar UnderwritingService 
- Modificar OpenAiService
- A√±adir res√∫menes de inicio/fin

#### FASE 3: Servicios de apoyo
- Modificar PdfImageService
- Modificar LargePdfVisionService
- Modificar AdaptiveProcessingStrategy

#### FASE 4: Testing y validaci√≥n
- Probar en desarrollo con logs completos
- Probar en staging con logs de producci√≥n
- Validar que errores/warnings se capturan correctamente

### 6. HELPER DE LOGGING PROPUESTO

```typescript
// src/common/utils/production-logger.ts
export class ProductionLogger {
  private readonly logger: Logger;
  
  constructor(context: string) {
    this.logger = new Logger(context);
  }

  // SIEMPRE se muestran
  documentStart(filename: string, sizeMB: number, provider: string, fieldCount: number) {
    this.logger.log(`üöÄ [INICIO] Processing ${filename} (${sizeMB}MB) | Provider: ${provider} | Fields: ${fieldCount}`);
  }

  documentEnd(filename: string, duration: number, success: number, total: number, errors: number, warnings: number) {
    this.logger.log(`‚úÖ [COMPLETADO] ${filename} | Duration: ${duration}s | Success: ${success}/${total} | Errors: ${errors} | Warnings: ${warnings}`);
  }

  error(filename: string, field: string, service: string, error: string) {
    this.logger.error(`‚ùå [ERROR] ${filename} | Field: ${field} | Service: ${service} | Error: ${error}`);
  }

  warning(filename: string, field: string, message: string) {
    this.logger.warn(`‚ö†Ô∏è [WARNING] ${filename} | Field: ${field} | ${message}`);
  }

  // CONDICIONALES - solo en desarrollo
  fieldSuccess(filename: string, field: string, result: string) {
    if (process.env.ENABLE_FIELD_SUCCESS_LOGS === 'true') {
      this.logger.log(`‚úÖ [SUCCESS] ${filename} | Field: ${field} | Result: ${result}`);
    }
  }

  debug(filename: string, field: string, message: string) {
    if (process.env.ENABLE_DEBUG_LOGS === 'true') {
      this.logger.debug(`üîç [DEBUG] ${filename} | Field: ${field} | ${message}`);
    }
  }
}
```

### 7. RESULTADO ESPERADO

#### LOGS DE PRODUCCI√ìN LIMPIOS:
```
üöÄ [INICIO] Processing LOP.pdf (2.89MB) | Provider: 407 Restoration CA LLC | Fields: 15
‚ö†Ô∏è [WARNING] LOP.pdf | Field: policy_valid_from1 | Low confidence: 0.45 | Used fallback
‚ö†Ô∏è [WARNING] LOP.pdf | Field: lop_date1 | Multiple formats detected | Used most confident
‚úÖ [COMPLETADO] LOP.pdf | Duration: 45.2s | Success: 13/15 | Errors: 0 | Warnings: 2
```

#### EN LUGAR DE LOGS ACTUALES VERBOSOS:
```
üìä LOP PROCESSING DEBUG: LOP.pdf - 2.89MB, threshold: 3MB, needsLargePdfProcessing: true
üîç LOP DECISION DEBUG: lop_signed_by_client1 - needsLargePdfProcessing: true, needsVisual: true, hasImages: 2 pages
üñºÔ∏è Converting 2 pages to images (timeout: 120s, size: 2.89MB, resolution: 4.0x [LOP - High Resolution])
‚úÖ Page 1 converted: 1234567 chars (Image: 1.11MB, Base64: 1.48MB)
‚úÖ Page 2 converted: 987654 chars (Image: 0.17MB, Base64: 0.23MB)
üéØ Vision API for: lop_signed_by_client1 (page 1)
üîç GPT-4o response: NO (confidence: 0.5)
üéØ Vision API for: lop_signed_by_client1 (page 2)
üîç GPT-4o response: YES (confidence: 0.85)
üì¶ Using cached strategy for lop_signed_by_ho1: Visual=true, Model=gpt-4o
... [50+ l√≠neas m√°s de logs innecesarios]
```